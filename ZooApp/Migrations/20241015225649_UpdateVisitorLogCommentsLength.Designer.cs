// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooApp.data;

#nullable disable

namespace ZooApp.Migrations
{
    [DbContext(typeof(ZooAppContext))]
    [Migration("20241015225649_UpdateVisitorLogCommentsLength")]
    partial class UpdateVisitorLogCommentsLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Age = 67,
                            ConcurrencyStamp = "2228865e-3d42-4d15-9391-9527aefc2a64",
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE1@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDea4iFJkeJGB0vD5O2GSQq5rcEbPkDSeLj3vU55MIVaXhCZYsQG8phEar9DGjyDVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29243150-8055-4ac4-9b74-db971ddc806c",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Age = 50,
                            ConcurrencyStamp = "283dbd73-142a-4c6d-9d7c-8600c6bd7f9e",
                            Email = "admin1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0dGwMw9XpeutfT/mhK9dFCxL3xRZ5yBAw2Njr45n0FSXX4F8PKd9WiRrynuhEXsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "324b00f4-b882-466b-9653-629f0dda1e30",
                            TwoFactorEnabled = false,
                            UserName = "admin1@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Age = 34,
                            ConcurrencyStamp = "43e74005-99d9-4c62-91bc-8fbc9e55f299",
                            Email = "employee2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Christopher",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "employee2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIb8SjyPqclFCSw79h19thSX1i2aGbXO1cnKo0xcIH/vdyxHVy53IQ5KCav7HmUHSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae395d87-c316-4a1d-be00-05c81ec2eda3",
                            TwoFactorEnabled = false,
                            UserName = "employee2@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Diet")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("EnclosureId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("Animal", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = 1,
                            Age = 5,
                            Diet = 0,
                            EmployeeId = 1,
                            EnclosureId = 1,
                            ImageFileName = "Lion.jpg",
                            Name = "Lion",
                            Sex = 0,
                            Species = "Panthera leo"
                        },
                        new
                        {
                            AnimalId = 2,
                            Age = 10,
                            Diet = 2,
                            EmployeeId = 2,
                            EnclosureId = 2,
                            ImageFileName = "Elephant.jpg",
                            Name = "Elephant",
                            Sex = 1,
                            Species = "Loxodonta africana"
                        },
                        new
                        {
                            AnimalId = 3,
                            Age = 3,
                            Diet = 1,
                            EmployeeId = 5,
                            EnclosureId = 5,
                            ImageFileName = "Parrot.jpg",
                            Name = "Parrot",
                            Sex = 1,
                            Species = "Psittaciformes"
                        },
                        new
                        {
                            AnimalId = 4,
                            Age = 6,
                            Diet = 0,
                            EmployeeId = 3,
                            EnclosureId = 1,
                            ImageFileName = "Tiger.jpg",
                            Name = "Tiger",
                            Sex = 1,
                            Species = "Panthera tigris"
                        },
                        new
                        {
                            AnimalId = 5,
                            Age = 12,
                            Diet = 1,
                            EmployeeId = 4,
                            EnclosureId = 2,
                            ImageFileName = "Gorilla.jpg",
                            Name = "Gorilla",
                            Sex = 0,
                            Species = "Gorilla gorilla"
                        },
                        new
                        {
                            AnimalId = 6,
                            Age = 5,
                            Diet = 3,
                            EmployeeId = 5,
                            EnclosureId = 6,
                            ImageFileName = "Penguin.jpg",
                            Name = "Penguin",
                            Sex = 0,
                            Species = "Aptenodytes forsteri"
                        },
                        new
                        {
                            AnimalId = 7,
                            Age = 4,
                            Diet = 2,
                            EmployeeId = 6,
                            EnclosureId = 3,
                            ImageFileName = "Kangaroo.jpg",
                            Name = "Kangaroo",
                            Sex = 1,
                            Species = "Macropus"
                        },
                        new
                        {
                            AnimalId = 8,
                            Age = 10,
                            Diet = 0,
                            EmployeeId = 3,
                            EnclosureId = 4,
                            ImageFileName = "Crocodile.jpg",
                            Name = "Crocodile",
                            Sex = 0,
                            Species = "Crocodylus"
                        },
                        new
                        {
                            AnimalId = 9,
                            Age = 7,
                            Diet = 2,
                            EmployeeId = 4,
                            EnclosureId = 1,
                            ImageFileName = "Zebra.jpg",
                            Name = "Zebra",
                            Sex = 1,
                            Species = "Equus zebra"
                        },
                        new
                        {
                            AnimalId = 10,
                            Age = 9,
                            Diet = 2,
                            EmployeeId = 5,
                            EnclosureId = 2,
                            ImageFileName = "Panda.jpg",
                            Name = "Panda",
                            Sex = 0,
                            Species = "Ailuropoda melanoleuca"
                        },
                        new
                        {
                            AnimalId = 11,
                            Age = 8,
                            Diet = 2,
                            EmployeeId = 6,
                            EnclosureId = 3,
                            ImageFileName = "Giraffe.jpg",
                            Name = "Giraffe",
                            Sex = 1,
                            Species = "Giraffa"
                        },
                        new
                        {
                            AnimalId = 12,
                            Age = 4,
                            Diet = 1,
                            EmployeeId = 3,
                            EnclosureId = 4,
                            ImageFileName = "Lemur.jpg",
                            Name = "Lemur",
                            Sex = 0,
                            Species = "Lemur"
                        },
                        new
                        {
                            AnimalId = 13,
                            Age = 11,
                            Diet = 0,
                            EmployeeId = 4,
                            EnclosureId = 6,
                            ImageFileName = "PolarBear.jpg",
                            Name = "Polar Bear",
                            Sex = 1,
                            Species = "Ursus maritimus"
                        },
                        new
                        {
                            AnimalId = 14,
                            Age = 6,
                            Diet = 2,
                            EmployeeId = 5,
                            EnclosureId = 2,
                            ImageFileName = "Hippo.jpg",
                            Name = "Hippo",
                            Sex = 0,
                            Species = "Hippopotamus"
                        },
                        new
                        {
                            AnimalId = 15,
                            Age = 5,
                            Diet = 2,
                            EmployeeId = 6,
                            EnclosureId = 4,
                            ImageFileName = "Sloth.jpg",
                            Name = "Sloth",
                            Sex = 1,
                            Species = "Bradypus"
                        },
                        new
                        {
                            AnimalId = 16,
                            Age = 8,
                            Diet = 0,
                            EmployeeId = 3,
                            EnclosureId = 3,
                            ImageFileName = "Wolf.jpg",
                            Name = "Wolf",
                            Sex = 0,
                            Species = "Canis lupus"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.AnimalEmployee", b =>
                {
                    b.Property<int>("AnimalEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalEmployeeId"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("AnimalEmployeeId");

                    b.HasIndex("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AnimalEmployee", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalEmployeeId = 1,
                            AnimalId = 1,
                            EmployeeId = 1
                        },
                        new
                        {
                            AnimalEmployeeId = 2,
                            AnimalId = 2,
                            EmployeeId = 2
                        },
                        new
                        {
                            AnimalEmployeeId = 3,
                            AnimalId = 3,
                            EmployeeId = 5
                        },
                        new
                        {
                            AnimalEmployeeId = 4,
                            AnimalId = 4,
                            EmployeeId = 3
                        },
                        new
                        {
                            AnimalEmployeeId = 5,
                            AnimalId = 5,
                            EmployeeId = 4
                        },
                        new
                        {
                            AnimalEmployeeId = 6,
                            AnimalId = 6,
                            EmployeeId = 5
                        },
                        new
                        {
                            AnimalEmployeeId = 7,
                            AnimalId = 7,
                            EmployeeId = 6
                        },
                        new
                        {
                            AnimalEmployeeId = 8,
                            AnimalId = 8,
                            EmployeeId = 3
                        },
                        new
                        {
                            AnimalEmployeeId = 9,
                            AnimalId = 9,
                            EmployeeId = 4
                        },
                        new
                        {
                            AnimalEmployeeId = 10,
                            AnimalId = 10,
                            EmployeeId = 5
                        },
                        new
                        {
                            AnimalEmployeeId = 11,
                            AnimalId = 11,
                            EmployeeId = 6
                        },
                        new
                        {
                            AnimalEmployeeId = 12,
                            AnimalId = 12,
                            EmployeeId = 3
                        },
                        new
                        {
                            AnimalEmployeeId = 13,
                            AnimalId = 13,
                            EmployeeId = 4
                        },
                        new
                        {
                            AnimalEmployeeId = 14,
                            AnimalId = 14,
                            EmployeeId = 5
                        },
                        new
                        {
                            AnimalEmployeeId = 15,
                            AnimalId = 15,
                            EmployeeId = 6
                        },
                        new
                        {
                            AnimalEmployeeId = 16,
                            AnimalId = 16,
                            EmployeeId = 3
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("EnclosureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            EnclosureId = 1,
                            HireDate = new DateTime(2024, 9, 16, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5421),
                            ImageFileName = "JohnDoe.jpg",
                            Name = "John Doe",
                            Phone = "123-456-7890",
                            Role = 0,
                            Salary = 50000m
                        },
                        new
                        {
                            EmployeeId = 2,
                            EnclosureId = 2,
                            HireDate = new DateTime(2024, 9, 26, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5438),
                            ImageFileName = "JaneSmith.jpg",
                            Name = "Jane Smith",
                            Phone = "987-654-3210",
                            Role = 1,
                            Salary = 70000m
                        },
                        new
                        {
                            EmployeeId = 3,
                            EnclosureId = 3,
                            HireDate = new DateTime(2024, 9, 21, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5450),
                            ImageFileName = "MichaelJohnson.jpg",
                            Name = "Michael Johnson",
                            Phone = "111-222-3333",
                            Role = 0,
                            Salary = 55000m
                        },
                        new
                        {
                            EmployeeId = 4,
                            EnclosureId = 4,
                            HireDate = new DateTime(2024, 10, 1, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5456),
                            ImageFileName = "EmilyWilson.jpg",
                            Name = "Emily Wilson",
                            Phone = "444-555-6666",
                            Role = 1,
                            Salary = 72000m
                        },
                        new
                        {
                            EmployeeId = 5,
                            EnclosureId = 5,
                            HireDate = new DateTime(2024, 9, 18, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5461),
                            ImageFileName = "ChristopherLee.jpg",
                            Name = "Christopher Lee",
                            Phone = "777-888-9999",
                            Role = 0,
                            Salary = 52000m
                        },
                        new
                        {
                            EmployeeId = 6,
                            EnclosureId = 6,
                            HireDate = new DateTime(2024, 10, 6, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5483),
                            ImageFileName = "JessicaBrown.jpg",
                            Name = "Jessica Brown",
                            Phone = "999-888-7777",
                            Role = 1,
                            Salary = 73000m
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Enclosure", b =>
                {
                    b.Property<int>("EnclosureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnclosureId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EnclosureId");

                    b.ToTable("Enclosure", (string)null);

                    b.HasData(
                        new
                        {
                            EnclosureId = 1,
                            Capacity = 5,
                            Habitat = "Savannah",
                            ImageFileName = "Savannah.jpg",
                            Name = "Savannah Enclosure"
                        },
                        new
                        {
                            EnclosureId = 2,
                            Capacity = 10,
                            Habitat = "Jungle",
                            ImageFileName = "Jungle.jpg",
                            Name = "Jungle Enclosure"
                        },
                        new
                        {
                            EnclosureId = 3,
                            Capacity = 7,
                            Habitat = "Forest",
                            ImageFileName = "Forest.jpg",
                            Name = "Forest Enclosure"
                        },
                        new
                        {
                            EnclosureId = 4,
                            Capacity = 6,
                            Habitat = "River",
                            ImageFileName = "River.jpg",
                            Name = "River Enclosure"
                        },
                        new
                        {
                            EnclosureId = 5,
                            Capacity = 8,
                            Habitat = "Aviary",
                            ImageFileName = "Aviary.jpg",
                            Name = "Aviary Enclosure"
                        },
                        new
                        {
                            EnclosureId = 6,
                            Capacity = 5,
                            Habitat = "Arctic",
                            ImageFileName = "Arctic.jpg",
                            Name = "Arctic Enclosure"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EventId");

                    b.ToTable("Event", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Date = new DateTime(2025, 1, 13, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5003),
                            Description = "Guided safari tour through the zoo",
                            ImageFileName = "Guide.jpg",
                            Name = "Zoo Safari",
                            TicketPrice = 25m
                        },
                        new
                        {
                            EventId = 2,
                            Date = new DateTime(2025, 2, 25, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5097),
                            Description = "Educational talk on wildlife conservation",
                            ImageFileName = "EducationalTalk.jpg",
                            Name = "Wildlife Conservation Talk",
                            TicketPrice = 10m
                        },
                        new
                        {
                            EventId = 3,
                            Date = new DateTime(2025, 1, 14, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5103),
                            Description = "Experience the zoo after dark with special activities and tours",
                            ImageFileName = "ZooAfterDark.jpg",
                            Name = "Night at the Zoo",
                            TicketPrice = 30m
                        },
                        new
                        {
                            EventId = 4,
                            Date = new DateTime(2025, 5, 14, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5108),
                            Description = "Guided tour focusing on observing various bird species in the zoo",
                            ImageFileName = "BirdTour.jpg",
                            Name = "Bird Watching Tour",
                            TicketPrice = 15m
                        },
                        new
                        {
                            EventId = 5,
                            Date = new DateTime(2025, 1, 22, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5113),
                            Description = "Learn about animal diets and behavior during feeding time",
                            ImageFileName = "AnimalDiet.jpg",
                            Name = "Animal Feeding Demonstration",
                            TicketPrice = 20m
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Ticket", (string)null);

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            DateOfPurchase = new DateTime(2024, 10, 14, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5981),
                            EventId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            DateOfPurchase = new DateTime(2024, 10, 15, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(5989),
                            EventId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            DateOfPurchase = new DateTime(2024, 10, 13, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6027),
                            EventId = 1,
                            VisitorId = 3
                        },
                        new
                        {
                            TicketId = 4,
                            DateOfPurchase = new DateTime(2024, 10, 12, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6033),
                            EventId = 2,
                            VisitorId = 4
                        },
                        new
                        {
                            TicketId = 5,
                            DateOfPurchase = new DateTime(2024, 10, 11, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6039),
                            EventId = 1,
                            VisitorId = 5
                        },
                        new
                        {
                            TicketId = 6,
                            DateOfPurchase = new DateTime(2024, 10, 10, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6045),
                            EventId = 2,
                            VisitorId = 6
                        },
                        new
                        {
                            TicketId = 7,
                            DateOfPurchase = new DateTime(2024, 10, 9, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6050),
                            EventId = 1,
                            VisitorId = 7
                        },
                        new
                        {
                            TicketId = 8,
                            DateOfPurchase = new DateTime(2024, 10, 8, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6056),
                            EventId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            TicketId = 9,
                            DateOfPurchase = new DateTime(2024, 10, 7, 11, 56, 47, 610, DateTimeKind.Local).AddTicks(6062),
                            EventId = 1,
                            VisitorId = 9
                        },
                        new
                        {
                            TicketId = 10,
                            DateOfPurchase = new DateTime(2024, 10, 6, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2665),
                            EventId = 2,
                            VisitorId = 10
                        },
                        new
                        {
                            TicketId = 11,
                            DateOfPurchase = new DateTime(2024, 10, 5, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2681),
                            EventId = 1,
                            VisitorId = 11
                        },
                        new
                        {
                            TicketId = 12,
                            DateOfPurchase = new DateTime(2024, 10, 4, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2687),
                            EventId = 2,
                            VisitorId = 12
                        },
                        new
                        {
                            TicketId = 13,
                            DateOfPurchase = new DateTime(2024, 10, 3, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2692),
                            EventId = 1,
                            VisitorId = 13
                        },
                        new
                        {
                            TicketId = 14,
                            DateOfPurchase = new DateTime(2024, 10, 2, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2698),
                            EventId = 2,
                            VisitorId = 14
                        },
                        new
                        {
                            TicketId = 15,
                            DateOfPurchase = new DateTime(2024, 10, 1, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2703),
                            EventId = 1,
                            VisitorId = 15
                        },
                        new
                        {
                            TicketId = 16,
                            DateOfPurchase = new DateTime(2024, 9, 30, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2709),
                            EventId = 2,
                            VisitorId = 16
                        },
                        new
                        {
                            TicketId = 17,
                            DateOfPurchase = new DateTime(2024, 9, 29, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(2715),
                            EventId = 1,
                            VisitorId = 17
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Visitor", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            Address = "123 Main St",
                            CreatedByUserId = "1",
                            Email = "alice@example.com",
                            Name = "Alice Johnson",
                            Phone = "+64-123-4567"
                        },
                        new
                        {
                            VisitorId = 2,
                            Address = "456 Elm St",
                            CreatedByUserId = "1",
                            Email = "bob@example.com",
                            Name = "Bob Smith",
                            Phone = "+64-987-6543"
                        },
                        new
                        {
                            VisitorId = 3,
                            Address = "789 Oak St",
                            CreatedByUserId = "1",
                            Email = "eva@example.com",
                            Name = "Eva Martinez",
                            Phone = "+64-111-1111"
                        },
                        new
                        {
                            VisitorId = 4,
                            Address = "101 Pine St",
                            CreatedByUserId = "1",
                            Email = "david@example.com",
                            Name = "David Brown",
                            Phone = "+64-222-2222"
                        },
                        new
                        {
                            VisitorId = 5,
                            Address = "456 Maple Ave",
                            CreatedByUserId = "1",
                            Email = "sophia@example.com",
                            Name = "Sophia Garcia",
                            Phone = "+64-333-3333"
                        },
                        new
                        {
                            VisitorId = 6,
                            Address = "789 Elm St",
                            CreatedByUserId = "1",
                            Email = "liam@example.com",
                            Name = "Liam Rodriguez",
                            Phone = "+64-444-4444"
                        },
                        new
                        {
                            VisitorId = 7,
                            Address = "123 Oak St",
                            CreatedByUserId = "1",
                            Email = "olivia@example.com",
                            Name = "Olivia Hernandez",
                            Phone = "+64-555-5555"
                        },
                        new
                        {
                            VisitorId = 8,
                            Address = "789 Pine Ave",
                            CreatedByUserId = "1",
                            Email = "lucas@example.com",
                            Name = "Lucas Martinez",
                            Phone = "+64-666-6666"
                        },
                        new
                        {
                            VisitorId = 9,
                            Address = "101 Maple St",
                            CreatedByUserId = "1",
                            Email = "isabella@example.com",
                            Name = "Isabella Nguyen",
                            Phone = "+64-777-7777"
                        },
                        new
                        {
                            VisitorId = 10,
                            Address = "456 Oak Ave",
                            CreatedByUserId = "1",
                            Email = "mia@example.com",
                            Name = "Mia Kim",
                            Phone = "+64-888-8888"
                        },
                        new
                        {
                            VisitorId = 11,
                            Address = "123 Maple Ave",
                            CreatedByUserId = "2",
                            Email = "james@example.com",
                            Name = "James Smith",
                            Phone = "+64-999-9999"
                        },
                        new
                        {
                            VisitorId = 12,
                            Address = "789 Pine St",
                            CreatedByUserId = "3",
                            Email = "charlotte@example.com",
                            Name = "Charlotte Johnson",
                            Phone = "+64-101-1010"
                        },
                        new
                        {
                            VisitorId = 13,
                            Address = "456 Elm St",
                            CreatedByUserId = "1",
                            Email = "william@example.com",
                            Name = "William Brown",
                            Phone = "+64-202-2020"
                        },
                        new
                        {
                            VisitorId = 14,
                            Address = "123 Maple Ave",
                            CreatedByUserId = "2",
                            Email = "amelia@example.com",
                            Name = "Amelia Davis",
                            Phone = "+64-303-3030"
                        },
                        new
                        {
                            VisitorId = 15,
                            Address = "789 Elm Ave",
                            CreatedByUserId = "2",
                            Email = "benjamin@example.com",
                            Name = "Benjamin Wilson",
                            Phone = "+64-404-4040"
                        },
                        new
                        {
                            VisitorId = 16,
                            Address = "101 Oak St",
                            CreatedByUserId = "2",
                            Email = "emma@example.com",
                            Name = "Emma Rodriguez",
                            Phone = "+64-505-5050"
                        },
                        new
                        {
                            VisitorId = 17,
                            Address = "456 Pine Ave",
                            CreatedByUserId = "2",
                            Email = "alexander@example.com",
                            Name = "Alexander Garcia",
                            Phone = "+64-606-6060"
                        },
                        new
                        {
                            VisitorId = 18,
                            Address = "321 Oak St",
                            CreatedByUserId = "3",
                            Email = "grace@example.com",
                            Name = "Grace Lee",
                            Phone = "+64-707-7070"
                        },
                        new
                        {
                            VisitorId = 19,
                            Address = "654 Elm St",
                            CreatedByUserId = "3",
                            Email = "jack@example.com",
                            Name = "Jack Wilson",
                            Phone = "+64-808-8080"
                        },
                        new
                        {
                            VisitorId = 20,
                            Address = "987 Pine Ave",
                            CreatedByUserId = "3",
                            Email = "lily@example.com",
                            Name = "Lily Smith",
                            Phone = "+64-909-9090"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.VisitorEventAttendance", b =>
                {
                    b.Property<int>("VisitorEventAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorEventAttendanceId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorEventAttendanceId");

                    b.HasIndex("EventId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorEventAttendance", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorEventAttendanceId = 1,
                            EventId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitorEventAttendanceId = 2,
                            EventId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitorEventAttendanceId = 3,
                            EventId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitorEventAttendanceId = 4,
                            EventId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitorEventAttendanceId = 5,
                            EventId = 5,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitorEventAttendanceId = 6,
                            EventId = 1,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitorEventAttendanceId = 7,
                            EventId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitorEventAttendanceId = 8,
                            EventId = 3,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitorEventAttendanceId = 9,
                            EventId = 4,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitorEventAttendanceId = 10,
                            EventId = 5,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitorEventAttendanceId = 11,
                            EventId = 3,
                            VisitorId = 11
                        },
                        new
                        {
                            VisitorEventAttendanceId = 12,
                            EventId = 4,
                            VisitorId = 12
                        },
                        new
                        {
                            VisitorEventAttendanceId = 13,
                            EventId = 5,
                            VisitorId = 13
                        },
                        new
                        {
                            VisitorEventAttendanceId = 14,
                            EventId = 1,
                            VisitorId = 14
                        },
                        new
                        {
                            VisitorEventAttendanceId = 15,
                            EventId = 2,
                            VisitorId = 15
                        },
                        new
                        {
                            VisitorEventAttendanceId = 16,
                            EventId = 3,
                            VisitorId = 16
                        },
                        new
                        {
                            VisitorEventAttendanceId = 17,
                            EventId = 4,
                            VisitorId = 17
                        });
                });

            modelBuilder.Entity("ZooApp.Models.VisitorLog", b =>
                {
                    b.Property<int>("VisitorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorLogId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Review")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorLogId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorLog", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorLogId = 1,
                            Comments = "Had a wonderful time seeing the lions.",
                            CreatedOn = new DateTime(2024, 10, 9, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3531),
                            Review = 0,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitorLogId = 2,
                            Comments = "The enclosures were clean and animals seemed happy.",
                            CreatedOn = new DateTime(2024, 10, 11, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3540),
                            Review = 0,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitorLogId = 3,
                            Comments = "It was okay, but a bit crowded.",
                            CreatedOn = new DateTime(2024, 10, 13, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3550),
                            Review = 2,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitorLogId = 4,
                            Comments = "The event was informative, but too long.",
                            CreatedOn = new DateTime(2024, 10, 15, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3556),
                            Review = 2,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitorLogId = 5,
                            Comments = "Had issues finding parking.",
                            CreatedOn = new DateTime(2024, 10, 14, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3562),
                            Review = 1,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitorLogId = 6,
                            Comments = "Loved the penguin show!",
                            CreatedOn = new DateTime(2024, 10, 12, 11, 56, 47, 611, DateTimeKind.Local).AddTicks(3568),
                            Review = 0,
                            VisitorId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.HasOne("ZooApp.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Enclosure", "Enclosure")
                        .WithMany("Animals")
                        .HasForeignKey("EnclosureId");

                    b.Navigation("Employee");

                    b.Navigation("Enclosure");
                });

            modelBuilder.Entity("ZooApp.Models.AnimalEmployee", b =>
                {
                    b.HasOne("ZooApp.Models.Animal", "Animal")
                        .WithMany("AnimalZooEmployees")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Employee", "Employee")
                        .WithMany("AnimalEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.HasOne("ZooApp.Models.Enclosure", "Enclosure")
                        .WithMany("Employees")
                        .HasForeignKey("EnclosureId");

                    b.Navigation("Enclosure");
                });

            modelBuilder.Entity("ZooApp.Models.Ticket", b =>
                {
                    b.HasOne("ZooApp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("Tickets")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.Visitor", b =>
                {
                    b.HasOne("ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ZooApp.Models.VisitorEventAttendance", b =>
                {
                    b.HasOne("ZooApp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("EventAttendances")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.VisitorLog", b =>
                {
                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("VisitorLogs")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.Navigation("AnimalZooEmployees");
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.Navigation("AnimalEmployees");
                });

            modelBuilder.Entity("ZooApp.Models.Enclosure", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ZooApp.Models.Visitor", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("Tickets");

                    b.Navigation("VisitorLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
